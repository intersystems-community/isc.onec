<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Apple Mac OS X for x86-64) 2014.2 (Build 240U)" ts="2014-04-28 15:49:16">
<Class name="isc.onec.bridge.TcpClient">
<Super>%RegisteredObject</Super>
<TimeChanged>62227,77405.235452</TimeChanged>
<TimeCreated>62207,50479.759939</TimeCreated>

<Property name="host">
</Property>

<Property name="port">
</Property>

<Property name="debug">
</Property>

<Property name="keepalive">
<InitialExpression>40</InitialExpression>
</Property>

<Property name="timeout">
<InitialExpression>100</InitialExpression>
</Property>

<Property name="socket">
<Type>ClientSocket</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>host,port,debug=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 
		s ..host = host
		s ..port = port
		s ..debug = debug

		quit $$$OK
]]></Implementation>
</Method>

<Method name="connect">
<Implementation><![CDATA[
	 	s socket = ##class(ClientSocket).%New()
	 	
		s socket.KeepAliveInterval = ..keepalive
		s socket.Host = ..host 
		s socket.Port = ..port
		/*s socket.TCPSendBuffer = 8192
		s socket.TCPReceiveBuffer = 8192
		s socket.OutputBufferSize = 8192
		s socket.InputBufferSize = 8192*/
		
		s ret = socket.Open(,,..timeout,.sc)

		throw:ret=0 ##class(isc.onec.NetworkError).get(##class(%Exception.StatusException).CreateFromStatus(sc),"on connect","host:"_..host_", port:"_..port)

		s ..socket = socket
]]></Implementation>
</Method>

<Method name="run">
<Description>
header = CMD TARGET OPERAND
1 byte - cmd
4 bytes - oid
2 bytes - length of operand
n bytes - operand
1 byte - number of values
m bytes - values
value is in format:
	  1 byte - type
   2 bytes - length
   n bytes - value</Description>
<Final>1</Final>
<FormalSpec>cmd:%Integer,target:%Integer,operand:%String,vlist:%ListOfDataTypes,tlist:%ListOfDataTypes</FormalSpec>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[
	#dim reply as %ListOfDataTypes
	#dim e as %Exception.SystemException
	try {
		#dim status as %Status = ..SendUnsafe(cmd, target, operand, vlist, tlist)
		  
		if ('$system.Status.IsError(status)) {
			set reply = ..Receive(cmd, target, operand, vlist, tlist)
		} else {
			// Problem writing data to the socket
			set reply = ..NewExceptionResponse($system.Status.GetErrorText(status))
		}
	} catch (e) {
		set reply = ..NewExceptionResponse("TcpClient.run(" _ ..toString(cmd, target, operand, tlist, vlist) _ ") when sending", e)
	}
	quit reply
]]></Implementation>
</Method>

<Method name="SendUnsafe">
<Description>
Doesn't handle any exceptions, so exception handling is a client responsibility</Description>
<Final>1</Final>
<FormalSpec>cmd:%Integer,target:%Integer,operand:%String,vlist:%ListOfDataTypes,tlist:%ListOfDataTypes</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim header as %String = $char(cmd) _ $nconvert(target, "S4") _ $nconvert($length(operand), "S2") _ $zconvert(operand, "O", "SAME")

	#dim values as %String
	if ($isobject(vlist)) {
		set values = $char(vlist.Count())

		#dim i as %Integer
		for i = 1:1:vlist.Count() {
			#dim v as %String = vlist.GetAt(i)

			set values = values _ $char(tlist.GetAt(i)) _ $nconvert($length(v), "U2") _ $zconvert(v, "O", "SAME")
		}
	} else {
		set values = $char(0)
	}
	#dim data = header _ values
	
	#dim status as %Status
	do ..socket.Write($nconvert($length(data), "U4") _ data, 1, .status)
	  
	if ($system.Status.IsError(status)) {
		quit status
	}
	
	do ..socket.Flush()
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Receive">
<Final>1</Final>
<FormalSpec>cmd:%Integer,target:%Integer,operand:%String,vlist:%ListOfDataTypes,tlist:%ListOfDataTypes</FormalSpec>
<Private>1</Private>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[
	#dim reply as %ListOfDataTypes
	#dim e as %Exception.SystemException
	try {
		set reply = ..ReceiveUnsafe(cmd, target, operand, vlist, tlist)
	} catch (e) {
		set reply = ..NewExceptionResponse("TcpClient.Receive(" _ ..toString(cmd, target, operand, tlist, vlist) _ ")", e)
	}
	quit reply
]]></Implementation>
</Method>

<Method name="ReceiveUnsafe">
<Description>
Doesn't handle any exceptions, so exception handling is a client responsibility</Description>
<Final>1</Final>
<FormalSpec>cmd:%Integer,target:%Integer,operand:%String,vlist:%ListOfDataTypes,tlist:%ListOfDataTypes</FormalSpec>
<Private>1</Private>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[
	#dim errorMessageHeader as %String = "TcpClient.ReceiveUnsafe(" _ ..toString(cmd, target, operand, tlist, vlist) _ "): "
	#dim errorMessage as %String

	#dim rawPacketLength as %String = ..read(4)
	/*
	 * Check whether we've read packetLength correctly
	 */
	if ($length(rawPacketLength) '= 4) {
		set errorMessage = "Failure reading an UInt32 (packetLength), " _ $length(rawPacketLength) _ " byte(s) read ("
		set errorMessage = errorMessage _ "rawPacketLength = """ _ rawPacketLength _ """"
		set errorMessage = errorMessage _ ")"
		quit ..NewExceptionResponse(errorMessageHeader _ errorMessage)
	}
	#dim packetLength as %Integer = $sconvert(rawPacketLength, "U4")

	#dim rawType as %String = ..read(2)
	/*
	 * Check whether we've read type correctly
	 */
	if ($length(rawType) '= 2) {
		set errorMessage = "Failure reading an Int16 (type), " _ $length(rawType) _ " byte(s) read ("
		set errorMessage = errorMessage _ "packetLength = """ _ packetLength _ """"
		set errorMessage = errorMessage _ ", rawType = """ _ rawType _ """"
		set errorMessage = errorMessage _ ")"
		quit ..NewExceptionResponse(errorMessageHeader _ errorMessage)
	}
	#dim type as %Integer = $ascii(rawType)

	#dim rawValueLength as %String = ..read(2)
	/*
	 * Check whether we've read valueLength correctly
	 */
	if ($length(rawValueLength) '= 2) {
		set errorMessage = "Failure reading an UInt16 (valueLength), " _ $length(rawValueLength) _ " byte(s) read ("
		set errorMessage = errorMessage _ "packetLength = """ _ packetLength _ """"
		set errorMessage = errorMessage _ ", type = """ _ type _ """"
		set errorMessage = errorMessage _ ", rawValueLength = """ _ rawValueLength _ """"
		set errorMessage = errorMessage _ ")"
		quit ..NewExceptionResponse(errorMessageHeader _ errorMessage)
	}
	#dim valueLength = $sconvert(rawValueLength, "U2")

	#dim rawValue as %String = $select(valueLength > 0: ..read(valueLength), 1: "")
	/*
	 * Check whether we've read value correctly
	 */
	if ($length(rawValue) '= valueLength) {
		set errorMessage = "Failure reading " _ valueLength _ " byte(s), " _ $length(rawValue) _ " byte(s) read ("
		set errorMessage = errorMessage _ "packetLength = """ _ packetLength _ """"
		set errorMessage = errorMessage _ ", type = """ _ type _ """"
		set errorMessage = errorMessage _ ", valueLength = """ _ valueLength _ """"
		set errorMessage = errorMessage _ ", rawValue = """ _ rawValue _ """"
		set errorMessage = errorMessage _ ")"
		quit ..NewExceptionResponse(errorMessageHeader _ errorMessage)
	}
	#dim value as %String = $zconvert(rawValue, "I", "UTF8")

	/*
	 * Check whether message invariants are held
	 */
	if ((type < ##class(Bridge).#VOIDREPLY) || (type > ##class(Bridge).#EXCEPTIONREPLY) || ((valueLength + 4) '= packetLength)) {
		set errorMessage = "Message invariants not held ("
		set errorMessage = errorMessage _ "packetLength = """ _ packetLength _ """"
		set errorMessage = errorMessage _ ", type = """ _ type _ """"
		set errorMessage = errorMessage _ ", valueLength = """ _ valueLength _ """"
		set errorMessage = errorMessage _ ", value = """ _ value _ """"
		set errorMessage = errorMessage _ ")"
		quit ..NewExceptionResponse(errorMessageHeader _ errorMessage)
	}

	#dim reply as %ListOfDataTypes = ##class(%ListOfDataTypes).%New()
	do reply.Insert(type)
	do reply.Insert(value)
	quit reply
]]></Implementation>
</Method>

<Method name="NewExceptionResponse">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>message:%String,e:%Exception.SystemException=$$$NULLOREF</FormalSpec>
<Private>1</Private>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[
	#dim reply as %ListOfDataTypes = ##class(%ListOfDataTypes).%New()
	do reply.Insert(##class(Bridge).#EXCEPTIONREPLY)
	do reply.Insert($zdatetime($now()) _ " " _ $select($isobject(e): message _ ": " _ e.DisplayString(), 1: message))
	quit reply
]]></Implementation>
</Method>

<Method name="read">
<FormalSpec>bytes</FormalSpec>
<Implementation><![CDATA[
	s value = ..socket.Read(bytes,..timeout,.sc)

	throw:$system.Status.IsError(sc) ##class(%Exception.StatusException).CreateFromStatus(sc)
	
	quit value
]]></Implementation>
</Method>

<Method name="toString">
<ClassMethod>1</ClassMethod>
<FormalSpec>cmd:%Integer,target:%Integer,operand:%String,tlist:%ListOfDataTypes,vlist:%ListOfDataTypes</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim values as %String = "{"
	#dim i as %Integer 
	for i = 1:1:tlist.Count() {
		set values = values _ tlist.GetAt(i) _ ":" _ vlist.GetAt(i) _ ","
	}
	quit cmd _ "," _ target _ "," _ operand _ ".values:" _ values _ "}"
]]></Implementation>
</Method>

<Method name="disconnect">
<Implementation><![CDATA[
	 if ($isObject(..socket)) {
		 s ..socket = ""	 
	 }
]]></Implementation>
</Method>

<Method name="%OnClose">
<Private>1</Private>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	d ..disconnect()
	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
