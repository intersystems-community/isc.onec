<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Apple Mac OS X for x86-64) 2014.2 (Build 240U)" ts="2014-04-28 15:49:15">
<Class name="isc.dev.Profiler">
<Import>isc.collection</Import>
<Super>isc.lang.Singleton</Super>
<TimeChanged>62160,54930.628089</TimeChanged>
<TimeCreated>62140,36137.661694</TimeCreated>

<Property name="ops">
<Type>ProfilerMap</Type>
</Property>

<Property name="slice">
<Type>ProfilerSlice</Type>
</Property>

<Property name="avg">
<Type>HashMap</Type>
</Property>

<Property name="st">
</Property>

<Property name="isStatisticsBuilt">
</Property>

<Method name="main">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	  s profiler = ..get()
	  d profiler.clearAll()
	  
	  s operations = $lb("setI","getI","process","next","save")
	  
	  s step = 100
	  
	  for i=1:1:1000 {
		s op = $lg(operations,$random(5)+1)
	  	d profiler.before(op)
	  	for j=1:1:$random(10) { s a = $zcos(j) }
	  	d profiler.after(op)
	  	if ((i#step)=0) {
		  	d profiler.slice(i\step)
	  	}
	  }
	  //d $system.OBJ.Dump(profiler)
	  //w profiler.ops.toString()
	  d profiler.listAll()
	  d profiler.listOperations()
	  //d profiler.buildStatistics()
	  d profiler.listTopOperations(10)
	  //d profiler.listByOperation(op)
	  d profiler.displayList()
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>args</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	  s ..ops = ##class(ProfilerMap).%New()
	  s ..slice = ##class(ProfilerSlice).%New()
	  s ..avg = ##class(HashMap).%New()
	  s ..isStatisticsBuilt = 0
	  
	  quit $$$OK
]]></Implementation>
</Method>

<Method name="before">
<FormalSpec>op</FormalSpec>
<Implementation><![CDATA[	  s ..st = $zh
]]></Implementation>
</Method>

<Method name="after">
<FormalSpec>op</FormalSpec>
<Implementation><![CDATA[
	  s et = $zh

	  if ('..ops.exists(op)) {
		  d ..insertMeasure(op)
	  }
	  d ..updateMeasure(op,et-..st)
]]></Implementation>
</Method>

<Method name="insertMeasure">
<FormalSpec>op</FormalSpec>
<Implementation><![CDATA[	  d ..ops.put(op,$lb(0,0,0))
]]></Implementation>
</Method>

<Method name="slice">
<FormalSpec>time</FormalSpec>
<Implementation><![CDATA[
	#dim it as ProfilerMapIterator = ..ops.iterator()
	while(it.hasNext()) {
		d ..slice.slice(it.next(),time)
	}
]]></Implementation>
</Method>

<Method name="updateMeasure">
<FormalSpec>op,duration</FormalSpec>
<Implementation><![CDATA[
  	  s measure = ..ops.get(op)
	  s count = $lg(measure,1) + 1
	  s total = $lg(measure,2) + duration
	  s avg = total/count
	  
	  d ..ops.put(op,$lb(count,total,avg))
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*Method buildStatistics()
{
	  #dim it as ProfilerMapIterator = ..ops.iterator()
	  while(it.hasNext()) {
		  s op = it.next()
		  s measure = ..ops.get(op)
		  s count = $lg(measure,1)
		  s total = $lg(measure,2)
		  s averageTime = total/count
		  //d ..avg.put(averageTime_":"_op,op)
	  }
	  
	  s ..isStatisticsBuilt = 1
}*/
]]></Content>
</UDLText>

<Method name="clearAll">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	  d ##class(ProfilerMap).clear()
	  d ##class(ProfilerSlice).clear()
]]></Implementation>
</Method>

<Method name="listAll">
<Implementation><![CDATA[	  quit ..ops
]]></Implementation>
</Method>

<Method name="listOperations">
<Implementation><![CDATA[
	  #dim keys as isc.collection.Object = ##class(isc.collection.Object).%New()
	  #dim it as ProfilerMapIterator = ..ops.iterator()
	  while(it.hasNext()) {
		  s keys.operation = it.next()
	  }
	  quit keys
]]></Implementation>
</Method>

<Method name="listOperationsByAvg">
<Implementation><![CDATA[	 quit ..listTopOperations()
]]></Implementation>
</Method>

<Method name="getSliceForOperation">
<FormalSpec>op</FormalSpec>
<Implementation><![CDATA[
	 	  #dim slice as ProfilerSliceIterator = ..slice.iterator(op)
	 	  #dim map as HashMap = ##class(HashMap).%New()
		  while(slice.hasNext()) {
			  s time = slice.next()
			  s avg =  $lg(slice.value(),3)
			  d map.put(time,$j(avg,8,6))
		  }
		  quit map
]]></Implementation>
</Method>

<Method name="listTopOperations">
<FormalSpec>top=0</FormalSpec>
<Implementation><![CDATA[
	  //d:'..isStatisticsBuilt ..buildStatistics()
	  #dim topList as HashMap = ##class(HashMap).%New()
	  #dim it as HashMapIterator = ..ops.iterator()
	  s n = 0
	  while(it.hasNext()) {
		  s key = it.next()
		  //s avg = $p(key,":",1)
		  //s op = $p(key,":",2)
		  //s measure = ..ops.get(op)
		  s measure = ..ops.get(key)
		  //s count = $lg(measure,1)
		  //s total = $lg(measure,2)
		  //s averageTime = total/count
		  //s averageTime = $lg(measure,3)
		  //d topList.put(op,$lb(count,total,averageTime))
		  d topList.put(key,measure)
		  s n = n + 1
		  quit:n=top
	  }
	  
	  quit topList
]]></Implementation>
</Method>

<Method name="displayList">
<Implementation><![CDATA[
	  s list = ..listOperationsByAvg()
	  s it = list.iterator()
	  w !,"|"_$j("operation",20)_"|"_$j("count",5)_"|"_$j("avg",8)_"|"_$j("total",8),!
	  while(it.hasNext()) {
		  s op = it.next()
		  s m = list.get(op)
		  s count = $lg(m,1)
		  s avg = $lg(m,3)
		  s total = $lg(m,2)
		  w "|"_$j(op,20)_"|"_$j(count,5)_"|"_$j(avg,8,6)_"|"_$j(total,8,6),!
	  }
	  w !
	  s it = list.iterator()
	  while(it.hasNext()) {
		  s op = it.next()
		  w "Slice for "_op_":",!
		  #dim slice as ProfilerSliceIterator = ..slice.iterator(op)
		  while(slice.hasNext()) {
			  s time = slice.next()
			  s avg =  $lg(slice.value(),3)
			  w time_":"_$j(avg,8,6)_" "
		  }
		  w !,!
	  }
]]></Implementation>
</Method>
</Class>
</Export>
