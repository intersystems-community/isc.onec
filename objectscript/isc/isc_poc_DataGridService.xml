<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Apple Mac OS X for x86-64) 2014.2 (Build 240U)" ts="2014-04-28 15:49:16">
<Class name="isc.poc.DataGridService">
<Super>%CSP.Page</Super>
<TimeChanged>62074,54770.287457</TimeChanged>
<TimeCreated>62015,69282.680111</TimeCreated>

<Parameter name="HTTPERRORNOTIMPLEMENTED">
<Description>
TODO Add 500 Internal Server Error if something failed</Description>
<Default>501</Default>
</Parameter>

<Parameter name="CONTENTTYPE">
<Default>text/javascript</Default>
</Parameter>

<Parameter name="HTMLCONTENTYPE">
<Default>text/html</Default>
</Parameter>

<Parameter name="MEASURETABLE">
<Default>isc_poc.Measure</Default>
</Parameter>

<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	#dim %request as %CSP.Request
	#dim %response as %CSP.Response
	
	if (%request.Method = "POST") quit 1
	if (%request.Method = "GET") { 
		s %response.ContentType = ..#HTMLCONTENTYPE
		quit 1
	}
	
	s %response.Status = ..#HTTPERRORNOTIMPLEMENTED

	quit 0
]]></Implementation>
</Method>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (%request.Method = "POST") d ..doPost(%request,%response)
	if (%request.Method = "GET") d ..doGet(%request,%response)
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="doPost">
<ClassMethod>1</ClassMethod>
<FormalSpec>request:%CSP.Request,response:%CSP.Response</FormalSpec>
<Implementation><![CDATA[
	
	s operation = request.Get("cmd","default")
	s start = request.Get("start",0)
	s limit = request.Get("limit",0) 
	//s in = $lfs($g(request.Data("args",1)))
	//if ($ll(in)=1)  s in = $lg(in,1)
	s in = $lb(start,limit)
	d $CLASSMETHOD($CLASSNAME($THIS),operation,in,.out)
	
	w out
	
	
	 //$system.Status.GetOneStatusText($g(%objlasterror))
]]></Implementation>
</Method>

<Method name="doGet">
<ClassMethod>1</ClassMethod>
<FormalSpec>request:%CSP.Request,response:%CSP.Response</FormalSpec>
<Implementation><![CDATA[
	&html<<html><head> 
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"> 
    <title>Результаты</title> 
    <link rel="stylesheet" type="text/css" href="/csp/ensemble/resources/css/ext-all.css" /> 
	 	<script type="text/javascript" src="/csp/ensemble/adapter/ext/ext-base.js"></script> 
	    <script type="text/javascript" src="/csp/ensemble/ext-all-debug.js"></script>
	    <!--script type="text/javascript" src="grid.js"></script-->
 </head> 
    <body><h1>Среднее количество сделок в секунду</h1> 
    <div id="placeholder" style="width:600px;height:300px"></div> 
<script id="source" language="javascript" type="text/javascript"> 
Ext.BLANK_IMAGE_URL = '/csp/ensemble/resources/images/default/s.gif';
var reader = new Ext.data.JsonReader({root: 'rows',
    idProperty: 'name',
    fields: ['name', 'url','size']
});
var proxy = new Ext.data.HttpProxy({method: 'POST',url: 'isc.poc.DataGridService.cls'}); 
var store = new Ext.data.Store({
    autoDestroy: true,
    proxy: proxy,
    reader: reader,
    storeId: 'store',
    loadMask: true 
});
var model  = new Ext.grid.ColumnModel([
    { id: 'exp',header: "Имя", width: 60, sortable: true,dataIndex: 'name'},
    { header: "Адрес", width: 150, sortable: true,dataIndex: 'url'},
    { header: "Размер", width: 100, sortable: true}
 ]);
 
 var pager = new Ext.PagingToolbar({
	  pageSize:10,
	  store:store
	 });
 var grid = new Ext.grid.GridPanel({
    store: store,
    colModel: model,
   // viewConfig: {forceFit: true},
    width: 600,
    height: 300,
    frame: true,
    title: 'Ссылки',
    renderTo: 'placeholder',
    autoExpandColumn: 'exp',
    bbar: pager
});
Ext.onReady(function() {
	Ext.StoreMgr.get('store').load({params:{start:0, limit:10}});
});
</script> 
 </body></html> >
]]></Implementation>
</Method>

<Method name="default">
<ClassMethod>1</ClassMethod>
<FormalSpec>in,res</FormalSpec>
<Implementation><![CDATA[
	s start = $lg(in,1) + 1
	s limit = $lg(in,2)
	s end = start + limit -1
	s list = ##class(isc.collection.HashMap).%New()
	
	d list.put("success","true")
	d list.put("total",2000)
	d list.put("rows",..select(limit,end))
	 
	
	s res = ..encode(list)
]]></Implementation>
</Method>

<Method name="test">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	/*
	for i=start:1:end {
		s row = ##class(isc.collection.HashMap).%New()
		d row.put("name",i_##class(%PopulateUtils).Company())
		d row.put("url",##class(%PopulateUtils).City()_", "_##class(%PopulateUtils).Street())
		d row.put("size",##class(%PopulateUtils).Currency())
		
		d rows.add(row)
	}
	*/
]]></Implementation>
</Method>

<Method name="select">
<ClassMethod>1</ClassMethod>
<FormalSpec>limit,end</FormalSpec>
<ReturnType>isc.collection.HashMap</ReturnType>
<Implementation><![CDATA[
	s sql="SELECT * FROM ( "_
 			"SELECT TOP ? * FROM ( "_
 			     //select applicationId appcode,serviceType->name stype,currentState state,applicantName applicant,createDate cdate,registerOrg->name organization from Application
   				"SELECT TOP ? Name,SSN "_
   				"FROM Sample.Person "_
   				"ORDER BY Name ASC "_
 			 ") AS FOO ORDER BY Name desc"_ 
		   ") AS BAR ORDER BY Name ASC"
	#dim stmt as %SQL.Statement
	//w sql	
	s stmt = ##class(%SQL.Statement).%New()
  	d stmt.%Prepare(sql)
  	#dim rs as %SQL.StatementResult = stmt.%Execute(limit,end) //posId)
	s rows = ##class(isc.collection.List).%New()
  	while rs.%Next() {
	  	s row = ##class(isc.collection.HashMap).%New()
		d row.put("name",rs.Name)
		d row.put("url",rs.SSN)
		d row.put("size",rs.SSN)
	
		d rows.add(row)
    }
    
    quit rows
]]></Implementation>
</Method>

<Method name="encode">
<ClassMethod>1</ClassMethod>
<FormalSpec>cos</FormalSpec>
<Implementation><![CDATA[		quit $$JSONFromObject^JSONencode(cos)
]]></Implementation>
</Method>
</Class>
</Export>
