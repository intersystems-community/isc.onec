<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Apple Mac OS X for x86-64) 2014.2 (Build 240U)" ts="2014-04-30 23:41:36">
<Class name="isc.onec.ContextTestCase">
<Description><![CDATA[
<b>Author</b>: <a href = "mailto:andrey.shcheglov@intersystems.com">Andrey Shcheglov</a>]]></Description>
<Final>1</Final>
<Import>%UnitTest</Import>
<Super>TestCase</Super>
<TimeChanged>63307,85075.344159</TimeChanged>
<TimeCreated>63307,84309.769788</TimeCreated>

<Method name="TestImplicitDecimal">
<Implementation><![CDATA[
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(-99999999999999999999999999999999999999999999999999999999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(-999999999999999999999999999999999999999999999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(-99999999999999999999999999999999999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(-9999999999999999999999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(-999999999999999999999999))

	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(-9999999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(-9999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(-99999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(-9))				
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(-001))			
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(-1))			
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(000))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(00))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(0))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(009))

	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(9))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(99))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(9999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(99999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(9999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(99999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(9999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(99999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(9999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(99999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(999999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(9999999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(99999999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(999999999999999999))
	
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(9999999999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(99999999999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(999999999999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(9999999999999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(99999999999999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(999999999999999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 + 1))

	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(3.1415926))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(2.7182818))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(1.1e20))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(+0))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType(-0))
]]></Implementation>
</Method>

<Method name="TestExplicitDecimal">
<Implementation><![CDATA[
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(-99999999999999999999999999999999999999999999999999999999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(-999999999999999999999999999999999999999999999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(-99999999999999999999999999999999999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(-9999999999999999999999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(-999999999999999999999999)))

	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(-9999999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(-9999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(-99999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(-9)))			
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(-001)))			
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(-1)))			
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(000)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(00)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(0)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(009)))

	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(9)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(99)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(9999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(99999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(9999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(99999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(9999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(99999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(9999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(99999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(999999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(9999999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(99999999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(999999999999999999)))
	
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(9999999999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(99999999999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(999999999999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(9999999999999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(99999999999999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(999999999999999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 + 1)))

	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(3.1415926)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(2.7182818)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(1.1e20)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(+0)))
	do $$$AssertEquals("DECIMAL", ##class(ContextUtilities).GetType($decimal(-0)))
]]></Implementation>
</Method>

<Method name="TestExplicitDouble">
<Implementation><![CDATA[
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(-99999999999999999999999999999999999999999999999999999999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(-999999999999999999999999999999999999999999999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(-99999999999999999999999999999999999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(-9999999999999999999999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(-999999999999999999999999)))

	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(-9999999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(-9999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(-99999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(-9)))				
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(-001)))			
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(-1)))			
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(000)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(00)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(0)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(009)))

	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(9)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(99)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(9999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(99999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(9999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(99999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(9999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(99999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(9999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(99999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(999999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(9999999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(99999999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(999999999999999999)))
	
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(9999999999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(99999999999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(999999999999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(9999999999999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(99999999999999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(999999999999999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 + 1)))

	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(3.1415926)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(2.7182818)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(1.1e20)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double("nan")))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double("inf")))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double("+inf")))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double("-inf")))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double("infinity")))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double("+infinity")))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double("-infinity")))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(+0)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double("+0")))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double(-0)))
	do $$$AssertEquals("DOUBLE", ##class(ContextUtilities).GetType($double("-0")))
]]></Implementation>
</Method>

<Method name="TestObject">
<Implementation><![CDATA[	do $$$AssertEquals("OBJECT", ##class(ContextUtilities).GetType(##class(%ResultSet).%New()))
]]></Implementation>
</Method>

<Method name="TestString">
<Implementation><![CDATA[
	do $$$AssertEquals("STRING", ##class(ContextUtilities).GetType(""))
	do $$$AssertEquals("STRING", ##class(ContextUtilities).GetType("foo"))
	do $$$AssertEquals("STRING", ##class(ContextUtilities).GetType("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"))
	do $$$AssertEquals("STRING", ##class(ContextUtilities).GetType("1"))
	do $$$AssertEquals("STRING", ##class(ContextUtilities).GetType("1.1"))
	do $$$AssertEquals("STRING", ##class(ContextUtilities).GetType("1e15"))
	do $$$AssertEquals("STRING", ##class(ContextUtilities).GetType(..NewString(1000000)))
	do $$$AssertEquals("STRING", ##class(ContextUtilities).GetType(..NewString(2000000)))
	do $$$AssertEquals("STRING", ##class(ContextUtilities).GetType(..NewString(3000000)))
	do $$$AssertEquals("STRING", ##class(ContextUtilities).GetType(..NewString(3500000)))
	do $$$AssertEquals("STRING", ##class(ContextUtilities).GetType("<Order><orderNumber>111103</orderNumber><orderDate>2014-04-24</orderDate><shop>AS</shop><cardNumber>99902733661</cardNumber><deliveryCost>0</deliveryCost><isTestOrder>false</isTestOrder><additionalInfo>put order comment</additionalInfo><address><Region>Московская область</Region><City>Черноголовка</City><Other>Ул. Береговая, дом 24, кВ. 14</Other></address><additionalServices><ByHand>false</ByHand><COD>true</COD></additionalServices><phone>79032034938</phone><fullName>Афанасьева Виктория</fullName><PlannedDate>2014-04-24</PlannedDate><PlannedTime>19:52:57Z</PlannedTime><agentCode>5000014776</agentCode><goods><Item><sku>565492</sku><amount>1</amount><price>810</price><discount>1</discount><sum>810</sum></Item><Item><sku>701655</sku><amount>1</amount><price>645</price><discount>1</discount><sum>645</sum></Item><Item><sku>701810</sku><amount>1</amount><price>825</price><discount>1</discount><sum>825</sum></Item><Item><sku>742349</sku><amount>1</amount><price>2030</price><discount>1</discount><sum>2030</sum></Item><Item><sku>744916</sku><amount>1</amount><price>1090</price><discount>1</discount><sum>1090</sum></Item><Item><sku>744905</sku><amount>1</amount><price>740</price><discount>1</discount><sum>740</sum></Item><Item><sku>742373</sku><amount>1</amount><price>740</price><discount>1</discount><sum>740</sum></Item><Item><sku>747995</sku><amount>1</amount><price>1740</price><discount>1</discount><sum>1740</sum></Item><Item><sku>712280</sku><amount>1</amount><price>690</price><discount>1</discount><sum>690</sum></Item><Item><sku>566023</sku><amount>1</amount><price>440</price><discount>1</discount><sum>440</sum></Item><Item><sku>652512</sku><amount>1</amount><price>870</price><discount>1</discount><sum>870</sum></Item><Item><sku>652515</sku><amount>1</amount><price>1090</price><discount>1</discount><sum>1090</sum></Item><Item><sku>565571</sku><amount>1</amount><price>1845</price><discount>1</discount><sum>1845</sum></Item><Item><sku>747992</sku><amount>1</amount><price>1745</price><discount>1</discount><sum>1745</sum></Item><Item><sku>764913</sku><amount>1</amount><price>920</price><discount>1</discount><sum>920</sum></Item><Item><sku>647840</sku><amount>1</amount><price>1185</price><discount>1</discount><sum>1185</sum></Item><Item><sku>60206</sku><amount>1</amount><price>1455</price><discount>1</discount><sum>1455</sum></Item><Item><sku>604069</sku><amount>1</amount><price>543</price><discount>1</discount><sum>543</sum></Item><Item><sku>60185</sku><amount>1</amount><price>510</price><discount>1</discount><sum>510</sum></Item><Item><sku>698143</sku><amount>1</amount><price>0</price><discount>1</discount><sum>0</sum></Item><Item><sku>662461</sku><amount>1</amount><price>0</price><discount>1</discount><sum>0</sum></Item><Item><sku>781468</sku><amount>1</amount><price>0</price><discount>1</discount><sum>0</sum></Item><Item><sku>781431</sku><amount>1</amount><price>0</price><discount>1</discount><sum>0</sum></Item><Item><sku>690995</sku><amount>1</amount><price>0</price><discount>0</discount><sum>0</sum></Item></goods></Order>"))
]]></Implementation>
</Method>

<Method name="TestList">
<Implementation><![CDATA[
	do $$$AssertEquals("LIST", ##class(ContextUtilities).GetType($listbuild()))
	do $$$AssertEquals("LIST", ##class(ContextUtilities).GetType($listbuild(1)))
	do $$$AssertEquals("LIST", ##class(ContextUtilities).GetType($listbuild("foo")))
	do $$$AssertEquals("LIST", ##class(ContextUtilities).GetType($listbuild($listbuild())))
]]></Implementation>
</Method>

<Method name="TestStringTypeCodeRange">
<Implementation><![CDATA[
	#dim test
	#dim length as %Integer
	for length = 254:1:10000 {
		#dim longString as %String = ..NewString(length)
		#dim typeCode as %Integer = ##class(ContextUtilities).GetTypeCode(longString)
		if ('$data(test(typeCode))) {
			set test(typeCode) = length
		}
	}
	#dim i as %Integer
	for i = 0:1:255 {
		do $$$AssertTrue($data(test(i)))
		do $$$AssertTrue(test(i) >= 254)
		/*
		 * The minimum upper bound of length range
		 * which allows to cover full typeCode range of 0 to 255.
		 */
		do $$$AssertTrue(test(i) <= 509)
	}
]]></Implementation>
</Method>

<Method name="NewString">
<ClassMethod>1</ClassMethod>
<FormalSpec>length:%Integer</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ('$data(%cachedValue(length))) {
		set %cachedValue(length) = $select(length = 0: "", 1: ..NewString(length \ 2) _ ..NewString(length \ 2) _ $select(((length # 2) = 0): "", 1: "A"))
	}
	return %cachedValue(length)
]]></Implementation>
</Method>

<Method name="Main">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	#dim workingDir as %String = "."

	do $system.OBJ.Export($classname() _ ".cls", workingDir _ "/" _ $classname() _ ".xml")
	set ^UnitTestRoot = workingDir
	$$$ThrowOnError(##class(Manager).RunTest("", "/recursive /load /run /nodelete /display=none"))
]]></Implementation>
</Method>
</Class>
</Export>
