<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Apple Mac OS X for x86-64) 2014.2 (Build 240U)" ts="2014-04-28 15:49:16">
<Class name="isc.onec.io.SocketCommon">
<Description>
Common class members to both Socket and ServerSocket</Description>
<Abstract>1</Abstract>
<ClassType/>
<CompileAfter>%IO.I.Stream</CompileAfter>
<IncludeCode>%occIO,%syINET</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<System>2</System>
<TimeChanged>62223,63030.596226</TimeChanged>
<TimeCreated>59493,41305.626967</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// TCP control properties...

]]></Content>
</UDLText>

<Property name="Port">
<Type>%String</Type>
<Parameter name="MAXLEN" value="6"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="InputBufferSize">
<Type>%Integer</Type>
<InitialExpression>32767</InitialExpression>
</Property>

<Property name="OutputBufferSize">
<Type>%Integer</Type>
<InitialExpression>32767</InitialExpression>
</Property>

<Property name="SSLConfig">
<Description>
The name of an existing SSL/TLS system configuration set to use (Secure Socket Layer / Transport Layer Security, configured via the system portal's Security Management page). May include a certificate password after a '|' character for inbound connections.</Description>
<Type>%String</Type>
</Property>

<Property name="Remote">
<Description>
The IP address and port of the remote end of the socket connection
Time and IP address and port (and disconnect time) of the last connected remote socket</Description>
<Type>%String</Type>
<ReadOnly>1</ReadOnly>
</Property>

<Property name="DisconnectHandler">
<Description>
Object on which to call OnDisconnect() when a connection is lost</Description>
<Type>%RegisteredObject</Type>
</Property>

<Property name="KeepAliveInterval">
<Description>
Connection-specific TCP keepalive interval in seconds. A setting of -1 means KeepAlive
should be disabled entirely. Cache supports per socket keepalive on Windows and Linux,
so this setting is ignored on other platforms. The default value of 0 will use the 
current system-wide TCP keepalive interval. Valid settings are -1, to disable keepalive 
entirely, and between 0 seconds and 432000 seconds (5 days), where positive values less than
30 will be treated as a 30 second interval.</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="MAXVAL" value="432000"/>
<Parameter name="MINVAL" value="-1"/>
</Property>

<Property name="TCPSendBuffer">
<Description><![CDATA[
Control the size, in bytes, of the TCP Send Buffer (SO_SNDBUF) for the TCP device.
This should be used in conjunction with <property>TCPReceiveBuffer</property>
to increase the TCP window as per RFC1323. The primary use case is in situations
with high latency or bandwidth, where the default sizes of the respective buffers
may constrain throughput.
The default value of 0 will use the OS default setting.]]></Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="TCPReceiveBuffer">
<Description><![CDATA[
Control the size, in bytes, of the TCP Receive Buffer (SO_RCVBUF) for the TCP device.
This should be used in conjunction with <property>TCPSendBuffer</property>
to increase the TCP window as per RFC1323. The primary use case is in situations
with high latency or bandwidth, where the default sizes of the respective buffers
may constrain throughput.
The default value of 0 will use the OS default setting.]]></Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="LineTerminator">
<Description>
Override InitialExpression</Description>
<Type>%String</Type>
<InitialExpression>$Char(10)</InitialExpression>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="AtEnd">
<Description>
Override InitialExpression</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<ReadOnly>1</ReadOnly>
</Property>

<Method name="WriteLine">
<FormalSpec>pLine:%String="",pFlush:%Boolean,*pSC:%Status</FormalSpec>
<Implementation><![CDATA[
	If '..IsOpen Set pSC = $$$ERROR($$$FileNotOpen,..Name)  Quit
	Set $ZT="Trap", tIO=$IO
	Use ..Name  Write pLine_..LineTerminator Write:$G(pFlush,1) *-3  Use tIO ; ..DefaultFlushOnWrite=1
	//Use ..Name:(/SEN=1)  Write pLine_..LineTerminator Write:$G(pFlush,1) *-3  Use tIO ; ..DefaultFlushOnWrite=1
	Set pSC=$$$OK
	Quit
Trap
	Set $ZT="", tZE=$ZE, pSC=$$$ERROR($$$CacheError,$g(tZE))
	Use tIO
	If ..isWriteError(tZE) {
		If ..%Extends("%IO.IParts.ServerSocketIO") { Do $method($this,"Disconnect",,0,pSC) }
		Else { Do ..Close(,0,pSC) }
	}
	Quit
]]></Implementation>
</Method>

<Method name="Write">
<Description>
Write pLine to the stream buffer, followed by the current LineTerminator characters. If pFlush is True, ensure that the characters are actually sent to the stream.</Description>
<FormalSpec>pData:%String="",pFlush:%Boolean,*pSC:%Status</FormalSpec>
<Implementation><![CDATA[
	If '..IsOpen Set pSC = $$$ERROR($$$FileNotOpen,..Name)  Quit
	Set $ZT="Trap", tIO=$IO
	Use ..Name  Write pData Write:$G(pFlush,1) *-3	 Use tIO ; ..DefaultFlushOnWrite=1
	Set pSC=$$$OK
	Quit
Trap
	Set $ZT="", tZE=$ZE, pSC=$$$ERROR($$$CacheError,$g(tZE))
	Use tIO
	If ..isWriteError(tZE) {
		If ..%Extends("%IO.IParts.ServerSocketIO") { Do $method($this,"Disconnect",,0,pSC) }
		Else { Do ..Close(,0,pSC) }
	}
	Quit
]]></Implementation>
</Method>

<Method name="Read">
<Description>
Read until pMaxReadLen chars are gotten or pTimeout expires
On return, if pTimeout is unchanged it means the full timeout period expired. If the timeout period expired and the returned string is shorter than pMaxReadLen, then AtEnd will be 1.</Description>
<FormalSpec><![CDATA[pMaxReadLen:%Integer,&pTimeout:%Numeric=-1,*pSC:%Status]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set pSC=$$$OK, tMaxLen=$$$MaxLocalLength  Set:""=$G(pMaxReadLen)||(pMaxReadLen>tMaxLen) pMaxReadLen=tMaxLen
	Set $ZT="Trap", tIO=$IO, tData=""
	Use ..Name:(::"+") ; turn off terminators
	
	If -1=pTimeout { Read tData#pMaxReadLen  Set tTimedOut=0 }
	Else { Read tData#pMaxReadLen:pTimeout  Set tTimedOut='$Test }
	Set:'tTimedOut pTimeout=0
Exit
	Use tIO
	Quit tData
Trap
	Set $ZT="", tZE=$ZE, pSC=$$$ERROR($$$CacheError,$G(tZE))
	Set pTimeout=0,tData=$G(tData)
	If ..isReadError(tZE) {
		If ..%Extends("%IO.IParts.ServerSocketIO") { Do $method($this,"Disconnect",,0,pSC) }
		Else { Do ..Close(,0,pSC) }
		Set:""'=tData pSC=$$$OK
	}
	Goto Exit
]]></Implementation>
</Method>

<Method name="ReadLine">
<Description>
Read until pMaxReadLen chars are gotten, pTimeout expires, or a LineTerminator character is found.
On return, if pTimeout=0 it means no timeout occurred. If pTimeout=0 and the returned string contains the full pMaxReadLen characters, it means no LineTerminator was encountered yet, even if the following character would be a LineTerminator.
If pTimeout=0 and the returned string is shorter than pMaxReadLen, then either a LineTerminator or the End Of Stream (AtEnd = 1) was encountered.
If pLineTerminator is defined, then the line is read until one of the given characters is encountered. On return, pLineTerminator contains the encountered character(s) if any.</Description>
<FormalSpec><![CDATA[pMaxReadLen:%Integer,&pTimeout=-1,*pSC:%Status,&pLineTerminator:%String=..LineTerminator]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set pSC=$$$OK, tZB=pLineTerminator, pLineTerminator=""
	Set tMaxLen=$$$MaxLocalLength  Set:""=$G(pMaxReadLen)||(pMaxReadLen>tMaxLen) pMaxReadLen=tMaxLen
	Set $ZT="Trap", tIO=$IO, tData=""
	Use ..Name:(::"+":tZB) ; turn on terminators
	
	If -1=pTimeout { Read tData#pMaxReadLen  Set tTimedOut=0 }
	Else { Read tData#pMaxReadLen:pTimeout  Set tTimedOut='$Test }
	Set:'tTimedOut pTimeout=0
	Set pLineTerminator=$ZB
Exit
	Set pLen=$L(tData)
	Use tIO
	Quit tData
Trap
	Set $ZT="", tZE=$ZE, pSC=$$$ERROR($$$CacheError,$g(tZE))
	Set pTimeout=0,tData=$G(tData)
	If ..isReadError(tZE) {
		If ..%Extends("%IO.IParts.ServerSocketIO") { Do $method($this,"Disconnect",,0,pSC) }
		Else { Do ..Close(,0,pSC) }
		Set:""'=tData pSC=$$$OK
	}
	Goto Exit
]]></Implementation>
</Method>

<Method name="ReadAny">
<Description>
Return as soon as any data arrives, or timeout expires, or MaxReadLen is reached</Description>
<FormalSpec><![CDATA[pMaxReadLen:%Integer,&pTimeout:%Numeric=-1,*pSC:%Status]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set pSC=$$$OK, tMaxLen=$$$MaxLocalLength  Set:""=$G(pMaxReadLen)||(pMaxReadLen>tMaxLen) pMaxReadLen=tMaxLen
	Set $ZT="Trap", tIO=$IO, tData=""
	Use ..Name:(::"-S") ; turn off terminators, turn on Packet mode instead of Stream mode
	
	If -1=pTimeout { Read tData#pMaxReadLen  Set tTimedOut=0 }
	Else { Read tData#pMaxReadLen:pTimeout  Set tTimedOut='$Test }
	Set:'tTimedOut pTimeout=0
Exit
	Use:..IsOpen ..Name:(::"+S") ; turn off Packet, restore Stream mode
	Use tIO
	Quit tData
Trap
	Set $ZT="", tZE=$ZE, pSC=$$$ERROR($$$CacheError,$G(tZE))
	Set pTimeout=0,tData=$G(tData)
	If ..isReadError(tZE) {
		If ..%Extends("%IO.IParts.ServerSocketIO") { Do $method($this,"Disconnect",,0,pSC) }
		Else { Do ..Close(,0,pSC) }
		Set:""'=tData pSC=$$$OK
	}
	Goto Exit
]]></Implementation>
</Method>

<Method name="Flush">
<Description>
Ensure that any data already written to the TCP buffer are actually sent to the remote partner.</Description>
<FormalSpec>*pSC:%Status</FormalSpec>
<Implementation><![CDATA[
	If '..IsOpen Set pSC = $$$ERROR($$$FileNotOpen,..Name) Quit
	Set pSC=$$$OK,tIO=$IO,$ZT="Trap"
	Use ..Name  Write *-3
Exit	
	Use tIO	Quit pSC
Trap
	Set $ZT="", tZE=$ZE, pSC=$$$ERROR($$$CacheError,$g(tZE))
	If ..isWriteError(tZE) {
		If ..%Extends("%IO.IParts.ServerSocketIO") Do $method($this,"Disconnect",,0,pSC)
		Else  Do ..Close(,0,pSC)
	}
	Goto Exit
]]></Implementation>
</Method>
</Class>
</Export>
