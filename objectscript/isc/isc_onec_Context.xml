<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Apple Mac OS X for x86-64) 2014.2 (Build 240U)" ts="2014-04-28 15:49:16">
<Class name="isc.onec.Context">
<Description>
TODO rewrite with Request-Reply protocol that is processed by protocol implementation class
TODO send as object reference Proxy object, not oid
TODO Subclass of proxy?</Description>
<Super>isc.dispatch.DispatchProxy,%RegisteredObject</Super>
<TimeChanged>62229,58357.096153</TimeChanged>
<TimeCreated>62176,66533.543653</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="bridge">
<Type>isc.onec.bridge.Bridge</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>bridge:isc.onec.bridge.Bridge</FormalSpec>
<Private>1</Private>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set ..bridge = bridge
	return $$$OK
]]></Implementation>
</Method>

<Method name="get">
<FormalSpec>proxy:Proxy,property</FormalSpec>
<Implementation><![CDATA[
	#dim path as %String = proxy.getPath() _ "." _ property 
	#dim oid as %String = proxy.getOID()
	
	#dim reply as %ListOfDataTypes = ..bridge.get(oid, property)
	
	if (..bridge.isException(reply)) {
		throw ##class(Exception).%New(reply, proxy.getPath() _ "." _ property)
	} elseif (..bridge.isObject(reply)) { 
		return ##class(Proxy).%New($this, reply.GetAt(2), path)
	}

	return reply.GetAt(2)
]]></Implementation>
</Method>

<Method name="set">
<FormalSpec>proxy:Proxy,property,value</FormalSpec>
<Implementation><![CDATA[
	#dim oid as %String = proxy.getOID()

	#dim type as %Integer
	#dim reply as %ListOfDataTypes
	if ($isObject(value)) {
		set type = ##class(isc.onec.bridge.Bridge).#OBJECTREQ
		set reply = ..bridge.set(oid, property, value.getOID(), type)
	} else {
		set type = ##class(isc.onec.bridge.Bridge).#DATAREQ
		set reply = ..bridge.set(oid, property, value, type)
	}

	if (..bridge.isException(reply)) {
		throw ##class(Exception).%New(reply, proxy.getPath() _ "." _ property)
	}
]]></Implementation>
</Method>

<Method name="invoke">
<FormalSpec>proxy,method,args...</FormalSpec>
<Implementation><![CDATA[
	#dim values as %ListOfDataTypes = ##class(%ListOfDataTypes).%New()
	#dim types as %ListOfDataTypes = ##class(%ListOfDataTypes).%New()
	
	if ($data(args)) {
		#dim num as %Integer = args
		//TODO  use unmarshall()
		#dim i as %Integer
		for i = 1:1:num {
			#dim t as %Integer
			#dim v as %String
			if ($isObject(args(i))) {
				set v = args(i).getOID()
				set t = ##class(isc.onec.bridge.Bridge).#OBJECTREQ
			} else {
				set v = args(i)
				if (..isNumber(args(i))) {
					set t = ##class(isc.onec.bridge.Bridge).#NUMBERREQ
				} else {
				 	set t = ##class(isc.onec.bridge.Bridge).#DATAREQ
				}
			}
			do values.Insert(v)
			do types.Insert(t)
		} 
	}

	#dim oid as %String = proxy.getOID()


	#dim reply as %ListOfDataTypes =  ..bridge.do(oid, method, values, types)

	if (..bridge.isException(reply)) {
		throw ##class(Exception).%New(reply, proxy.getPath() _ "." _ method _ "()")
	} elseif (..bridge.isObject(reply)) { 
		#dim path as %String = proxy.getPath() _ "." _ method _ "()"

		return ##class(Proxy).%New($this, reply.GetAt(2), path)
	}
	
	return reply.GetAt(2)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// TODO check other numbers: 1, -1, 0.1, -0.1, etc

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Currently I suppose that only signed and unsigned integers are marshalled to integers

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// All other numbers are interpreted as strings

]]></Content>
</UDLText>

<Method name="isNumber">
<ClassMethod>1</ClassMethod>
<FormalSpec>v</FormalSpec>
<Implementation><![CDATA[
	#dim t as %Integer = $ascii($listbuild(v), 2)
	return:t=4 1
	return:t=5 1
	return 0
]]></Implementation>
</Method>

<Method name="connect">
<FormalSpec>url</FormalSpec>
<Implementation><![CDATA[
	#dim reply as %ListOfDataTypes = ..bridge.connect(url)
	if (..bridge.isException(reply)) {
		throw ##class(Exception).%New(reply, "on connect to " _ url)
	}
]]></Implementation>
</Method>

<Method name="free">
<FormalSpec>proxy:Proxy</FormalSpec>
<Implementation><![CDATA[
	if ($isObject(..bridge)) {
		do ..bridge.free(proxy.getOID())
	}
]]></Implementation>
</Method>

<Method name="showStat">
<Implementation><![CDATA[	do ..bridge.statistics()
]]></Implementation>
</Method>

<Method name="disconnect">
<Implementation><![CDATA[
	if ('$isObject(..bridge)) {
		return
	}

	#dim reply as %ListOfDataTypes = ..bridge.disconnect()
	if (..bridge.isException(reply)) {
		throw ##class(Exception).%New(reply)
	}
	set ..bridge = $$$NULLOREF
]]></Implementation>
</Method>

<Method name="%OnClose">
<Private>1</Private>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	#dim e as Exception
	try {
		do ..disconnect()
	} catch (e) {
		// Ignore.
	}

	return $$$OK
]]></Implementation>
</Method>

<Method name="getOID">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ""
]]></Implementation>
</Method>

<Method name="getPath">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ""
]]></Implementation>
</Method>

<Method name="insteadOf">
<FormalSpec>method:%String,args...</FormalSpec>
<Implementation><![CDATA[	return ..invoke($this, method, args...)
]]></Implementation>
</Method>

<Method name="insteadOfSet">
<FormalSpec>property:%String,value</FormalSpec>
<Implementation><![CDATA[	do ..set($this, property, value)
]]></Implementation>
</Method>

<Method name="insteadOfGet">
<FormalSpec>property:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ..get($this, property)
]]></Implementation>
</Method>
</Class>
</Export>
